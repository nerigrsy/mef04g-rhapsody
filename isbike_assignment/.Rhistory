plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage)
ggplot(plot_df, aes(x=as.character(Capacity), y=Percentage)) +
geom_col()
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Percentage))
ggplot(plot_df, aes(x=as.character(Capacity), y=Percentage)) +
geom_col()
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Capacity))
ggplot(plot_df, aes(x=as.character(Capacity), y=Percentage)) +
geom_col()
plot_df
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Percentage))
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Percentage))
plot_df
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Percentage) %>%
arrange(desc(Percentage))
ggplot(plot_df, aes(x=Percentage)) +
geom_col()
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Percentage))
ggplot(plot_df, aes(x=as.character(Capacity), y=Percentage)) +
geom_col()
plot_df
ggplot(plot_df, aes(x=Capacity, y=Percentage)) +
geom_col()
ggplot(plot_df, aes(x=Capacity, y=Percentage)) +
geom_col() +
coord_flip()
plot_df %>% mutate(Capacity = fct_reorder(Capacity, Percentage))
isbike_df %>%
arrange(Capacity) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Capacity=factor(Capacity, levels=Capacity)) %>%   # This trick update the factor levels
ggplot( aes(x=Capacity, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
isbike_df %>%
arrange(Capacity) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Capacity=factor(Capacity, levels=Capacity)) %>%   # This trick update the factor levels
ggplot( aes(x=Capacity, y=val))
isbike_df %>%
arrange(Capacity) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Capacity=factor(Capacity, levels=Capacity)) %>%   # This trick update the factor levels
ggplot( aes(x=Capacity, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
isbike_df %>%
arrange(Capacity) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Capacity=factor(Capacity, levels=Capacity)) %>%   # This trick update the factor levels
ggplot( aes(x=Capacity, y=val)) +
geom_segment( aes(xend=name, yend=0))
isbike_df %>%
arrange(Capacity) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Capacity=factor(Capacity, levels=Capacity)) %>%   # This trick update the factor levels
ggplot( aes(x=Capacity, y=val)) +
geom_segment( aes(xend=name, yend=0))
isbike_df %>%
arrange(Capacity) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Capacity=factor(Capacity, levels=Capacity)) %>%   # This trick update the factor levels
ggplot( aes(x=Capacity, y=val)) +
geom_segment( aes(xend=name, yend=0))
isbike_df %>%
arrange(Capacity) %>%    # First sort by val. This sort the dataframe but NOT the factor levels
mutate(Capacity=factor(Capacity, levels=Capacity)) %>%   # This trick update the factor levels
ggplot( aes(x=Capacity, y=val)) +
geom_segment( aes(xend=name, yend=0))
isbike_df %>%
arrange(Capacity) %>%
mutate(name=factor(Capacity, levels=Capacity)) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0))
ggplot(plot_df, aes(x=Capacity, y=Percentage)) +
geom_col() +
coord_flip()
plot_df
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Percentage)) %>%
mutate(Capacity = as.character(Capacity), Percentage = as.character(Percentage))
ggplot(plot_df, aes(x=Capacity, y=Percentage)) +
geom_col() +
coord_flip()
plot_df
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
mutate(Capacity = as.character(Capacity), Percentage = as.character(Percentage))
ggplot(plot_df, aes(x=Capacity, y=Percentage)) +
geom_col() +
coord_flip()
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
head(5)
plot_df
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Percentage)) %>%
head(5)
plot_df
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Percentage)) %>%
plot_df
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage) %>%
arrange(desc(Percentage))
plot_df
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Capacity, Percentage)
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage)) + geom_bar(stat = "identity")
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage, color = Capacity)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage, color = Capacity)) +
geom_bar(stat = "identity") +
coord_flip(270)
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage, color = Capacity)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage, color = Percentage)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage, color = "Capacity")) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage)) +
geom_bar(stat = "identity", fill()) +
coord_flip()
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill = Capacity) +
coord_flip()
<zx
xcafewilfkop2kf
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill = Capacity) +
coord_flip()
ggplot(plot_df, aes(x = reorder(Capacity, -Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill = Capacity)) +
coord_flip()
ggplot(plot_df, aes(x = reorder(-Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill = Capacity)) +
coord_flip()
ggplot(plot_df, aes(x = reorder(-Capacity), y = Percentage)) +
geom_bar(stat = "identity") +
coord_flip()
?reorder
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(plot_df, aes(x = reorder(-Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity") +
coord_flip()
runApp()
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip()
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
mutate(Capacity = as.character(Capacity)) %>%
select(Capacity, Percentage)
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip()
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip() +
ggtitle("Capacities of Stations") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip() +
ggtitle("Capacity Distribution of Stations") +
labs(y = "Capacity") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip() +
ggtitle("Capacity Distribution of Stations") +
labs(x = "Capacity") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip() +
ggtitle("Capacity Distribution of Stations") +
labs(x = "Capacity") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5),
ylab = FALSE)
?ylab
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip() +
labs(title = "Capacity Distribution of Stations", x = "Capacity", y = "") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
runApp('~/Desktop/asdasdadasd')
runApp('~/Desktop/asdasdadasd')
runApp('~/Desktop/asdasdadasd')
runApp('~/Desktop/asdasdadasd')
z <- z %>% mutate(Bos_Ratio = replace(Bos_Ratio,is.nan(Bos_Ratio),0))
z <- z$dataList %>% mutate(Bos_Ratio= (bos/(dolu+bos)))
z <- fromJSON(x)
x <- readRDS("/Users/Serhan/Desktop/isbike_20201118.rds")
y <- toJSON(x,pretty = TRUE)
z <- fromJSON(x)
z$dataList$bos=as.integer(z$dataList$bos)
z$dataList$dolu=as.integer(z$dataList$dolu)
z$dataList$lon=as.double(z$dataList$lon)
z$dataList$lat=as.double(z$dataList$lat)
z <- z$dataList %>% mutate(Bos_Ratio= (bos/(dolu+bos)))
z <- z %>% mutate(Bos_Ratio = replace(Bos_Ratio,is.nan(Bos_Ratio),0))
z <- z$dataList %>% mutate(Bos_Ratio = replace(Bos_Ratio,is.nan(Bos_Ratio),0))
z
x <- readRDS("/Users/Serhan/Desktop/isbike_20201118.rds")
y <- toJSON(x,pretty = TRUE)
cat(y)
z <- fromJSON(x)
z$dataList$bos=as.integer(z$dataList$bos)
z$dataList$dolu=as.integer(z$dataList$dolu)
z$dataList$lon=as.double(z$dataList$lon)
z$dataList$lat=as.double(z$dataList$lat)
z %>% head(5)
z %>% head(1)
z %>% head(2)
z %>% head(3)
z %>% head(4)
z <- z$dataList %>% mutate(Bos_Ratio= (bos/(dolu+bos)))
z <- z$dataList %>% mutate(Bos_Ratio= (bos/(dolu+bos)))
z <- z[["dataList"]] %>% mutate(Bos_Ratio= (bos/(dolu+bos)))
z <- z$dataList %>% mutate(Bos_Ratio= (z$dataList$bos/(z$dataList$dolu+z$dataList$bos)))
z <- z$dataList %>% mutate(BosRatio= (z$dataList$bos/(z$dataList$dolu+z$dataList$bos)))
z$dataList %>% mutate(Bos_Ratio= (z$dataList$bos/(z$dataList$dolu+z$dataList$bos)))
z <- z$dataList %>% mutate(Bos_Ratio= (bos/(dolu+bos)))
z <- z$dataList %>% mutate(Bos_Ratio= (bos/(dolu+bos)))
z <- z$dataList %>% mutate(Bos_Ratio= (bos/(dolu+bos)))
z <- z$dataList %>% mutate(Bos_Ratio= bos/(dolu+bos))
z$dataList %>% mutate(Bos_Ratio= bos/(dolu+bos))
z %>% mutate(Bos_Ratio= bos/(dolu+bos))
z$dataList$Bos_Ratio = z$dataList$bos/(z$dataList$dolu+z$dataList$bos))
z$dataList$Bos_Ratio = z$dataList$bos/(z$dataList$dolu+z$dataList$bos)
z$dataList$Bos_Ratio = replace(z$dataList$Bos_Ratio,is.nan(z$dataList$Bos_Ratio),0)
runApp('~/Desktop/asdasdadasd')
runApp('~/Desktop/asdasdadasd')
runApp()
runApp()
runApp()
my_df <- readRDS("isbike_20201118.rds")
json_df <- fromJSON(my_df)
final_df <- json_df[["dataList"]]
isbike_df <- final_df %>%
transmute(StationNo = as.integer(istasyon_no),
StationName = adi,
Available = as.integer(bos),
Occupied = as.integer(dolu),
Capacity = Available + Occupied,
AvailabilityRate = round((Available / Capacity * 100), 1),
Latitude = as.numeric(lat),
Longtitude = as.numeric(lon),
LastConnection = as.POSIXct(sonBaglanti,format='%Y-%m-%dT%H:%M:%S'),
LastConnectionDay = day(LastConnection)) %>%
mutate(AvailabilityRate = replace(AvailabilityRate, is.na(AvailabilityRate), 0))
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("isbike Stations"),
tabsetPanel(
tabPanel("General Information",
mapviewOutput("isbikeMap"),
#plotOutput("isbikeHist"),
plotOutput("isbikeCapacity")),
tabPanel("Current Availability",
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("available",
"Available Bikes:",
min = min(isbike_df$Available),
max = max(isbike_df$Available),
value = c(min(isbike_df$Available)+1, max(isbike_df$Available)-1),
step = 1),
sliderInput("availability",
"Availability Rate %:",
min = min(isbike_df$AvailabilityRate),
max = max(isbike_df$AvailabilityRate),
value = c(min(isbike_df$AvailabilityRate)+1, max(isbike_df$AvailabilityRate)-1),
step = 5),
),
# Show a plot of the generated distribution
mainPanel(DTOutput("isbikeTable"))
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$isbikeMap <- renderMapview({
non_na_df <- isbike_df
non_na_df$Latitude[non_na_df$Latitude == ""] = "0"
non_na_df$Longtitude[non_na_df$Longtitude == ""] = "0"
map_df <- non_na_df %>%
#filter(Available >= input$available[1]) %>%
#filter(Available <= input$available[2]) %>%
filter(!Longtitude %in% "0") %>%
filter(!Latitude %in% "0") %>%
select(StationName, Longtitude, Latitude)
isbike_map_sf <- st_as_sf(map_df, coords = c("Longtitude", "Latitude"), crs = 4326)
mapview(isbike_map_sf, legend = FALSE)
})
# output$isbikeHist <- renderPlot({
#
#     hist_vector <- isbike_df %>%
#         transmute(TotalCapacity = Available + Occupied)
#
#     hist_vector <- as.numeric(unlist(hist_vector))
#
#
#     bins <- seq(min(hist_vector), max(hist_vector), length.out = 30)
#
#     # draw the histogram with the specified number of bins
#     hist(hist_vector, breaks = bins, col = 'darkgray', border = 'white')
#
# })
output$isbikeCapacity <- renderPlot({
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
mutate(Capacity = as.character(Capacity)) %>%
select(Capacity, Percentage)
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip() +
labs(title = "Capacity Distribution of Stations", x = "Capacity", y = "") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
})
output$isbikeTable <- renderDT({
table_df <- isbike_df %>%
filter(Available >= input$available[1], Available <= input$available[2]) %>%
filter(AvailabilityRate >= input$availability[1], AvailabilityRate <= input$availability[2]) %>%
select(StationNo, StationName, Available, Occupied, Capacity, AvailabilityRate)
table_df
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("isbike Stations"),
tabsetPanel(
tabPanel("General Information",
mapviewOutput("isbikeMap"),
#plotOutput("isbikeHist"),
plotOutput("isbikeCapacity")),
tabPanel("Current Availability",
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("available",
"Available Bikes:",
min = min(isbike_df$Available),
max = max(isbike_df$Available),
value = c(min(isbike_df$Available)+1, max(isbike_df$Available)-1),
step = 1),
sliderInput("availability",
"Availability Rate %:",
min = min(isbike_df$AvailabilityRate),
max = max(isbike_df$AvailabilityRate),
value = c(min(isbike_df$AvailabilityRate)+1, max(isbike_df$AvailabilityRate)-1),
step = 5),
),
# Show a plot of the generated distribution
mainPanel(DTOutput("isbikeTable"))
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$isbikeMap <- renderMapview({
non_na_df <- isbike_df
non_na_df$Latitude[non_na_df$Latitude == ""] = "0"
non_na_df$Longtitude[non_na_df$Longtitude == ""] = "0"
map_df <- non_na_df %>%
#filter(Available >= input$available[1]) %>%
#filter(Available <= input$available[2]) %>%
filter(!Longtitude %in% "0") %>%
filter(!Latitude %in% "0") %>%
select(StationName, Longtitude, Latitude)
isbike_map_sf <- st_as_sf(map_df, coords = c("Longtitude", "Latitude"), crs = 4326)
mapview(isbike_map_sf, legend = FALSE)
})
# output$isbikeHist <- renderPlot({
#
#     hist_vector <- isbike_df %>%
#         transmute(TotalCapacity = Available + Occupied)
#
#     hist_vector <- as.numeric(unlist(hist_vector))
#
#
#     bins <- seq(min(hist_vector), max(hist_vector), length.out = 30)
#
#     # draw the histogram with the specified number of bins
#     hist(hist_vector, breaks = bins, col = 'darkgray', border = 'white')
#
# })
output$isbikeCapacity <- renderPlot({
plot_df <- isbike_df %>%
filter(Capacity > 0) %>%
count(Capacity, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
mutate(Capacity = as.character(Capacity)) %>%
select(Capacity, Percentage)
ggplot(plot_df, aes(x = reorder(Capacity, Percentage), y = Percentage)) +
geom_bar(stat = "identity", aes(fill=Capacity)) +
coord_flip() +
labs(title = "Capacity Distribution of Stations", x = "Capacity", y = "") +
theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
})
output$isbikeTable <- renderDT({
table_df <- isbike_df %>%
filter(Available >= input$available[1], Available <= input$available[2]) %>%
filter(AvailabilityRate >= input$availability[1], AvailabilityRate <= input$availability[2]) %>%
select(StationNo, StationName, Available, Occupied, Capacity, AvailabilityRate)
table_df
})
}
# Run the application
shinyApp(ui = ui, server = server)
isbike_df <- final_df %>%
transmute(StationNo = as.integer(istasyon_no),
StationName = adi,
Available = as.integer(bos),
Occupied = as.integer(dolu),
Capacity = Available + Occupied,
AvailabilityRate = round((Available / Capacity * 100), 1),
Latitude = as.numeric(lat),
Longtitude = as.numeric(lon),
LastConnection = as.POSIXct(sonBaglanti,format='%Y-%m-%dT%H:%M:%S'),
LastConnectionDay = day(LastConnection)) %>%
mutate(AvailabilityRate = replace(AvailabilityRate, is.na(AvailabilityRate), 0))
library(shiny)
library(tidyverse)
library(jsonlite)
library(ggplot2)
library(sf)
library(mapview)
library(DT)
library(leaflet)
library(lubridate)
isbike_df <- final_df %>%
transmute(StationNo = as.integer(istasyon_no),
StationName = adi,
Available = as.integer(bos),
Occupied = as.integer(dolu),
Capacity = Available + Occupied,
AvailabilityRate = round((Available / Capacity * 100), 1),
Latitude = as.numeric(lat),
Longtitude = as.numeric(lon),
LastConnection = as.POSIXct(sonBaglanti,format='%Y-%m-%dT%H:%M:%S'),
LastConnectionDay = day(LastConnection)) %>%
mutate(AvailabilityRate = replace(AvailabilityRate, is.na(AvailabilityRate), 0))
