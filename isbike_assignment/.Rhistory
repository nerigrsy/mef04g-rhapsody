summarise(AverageMCP = mean(MCP), AverageSMP = mean(SMP))
ggplot(daily_prices, aes(x = WeekDay)) +
geom_line(aes(y = AverageMCP, color = "Average MCP")) +
geom_line(aes(y = AverageSMP, color = "Average SMP")) +
ggtitle("MCP & SMP Over Days") +
labs(y = "Price Values", color = "Legend") +
theme(plot.title = element_text(hjust = 0.5))
daily_prices <- elec_df %>%
group_by(WeekDay) %>%
summarise(AverageMCP = mean(MCP), AverageSMP = mean(SMP))
ggplot(daily_prices, aes(x = WeekDay)) +
geom_line(aes(y = AverageMCP)) +
geom_line(aes(y = AverageSMP)) +
ggtitle("MCP & SMP Over Days") +
labs(y = "Price Values", color = "Legend") +
theme(plot.title = element_text(hjust = 0.5))
daily_prices <- elec_df %>%
group_by(WeekDay) %>%
summarize(AverageMCP = mean(MCP), AverageSMP = mean(SMP))
ggplot(daily_prices, aes(x = WeekDay)) +
geom_line(aes(y = AverageMCP, color = "Average MCP")) +
geom_line(aes(y = AverageSMP, color = "Average SMP")) +
ggtitle("MCP & SMP Over Days") +
labs(x = "Days", y = "Price Values", color = "Legend") +
theme(plot.title = element_text(hjust = 0.5))
daily_prices <- elec_df %>%
group_by(WeekDay) %>%
summarise(AverageMCP = mean(MCP), AverageSMP = mean(SMP))
ggplot(daily_prices, aes(x = WeekDay)) +
geom_line(aes(y = AverageMCP, color = "Average MCP"))
daily_prices <- elec_df %>%
group_by(WeekDay) %>%
summarise(AverageMCP = mean(MCP), AverageSMP = mean(SMP))
daily_prices
daily_prices <- elec_df %>%
group_by(WeekDay) %>%
summarise(AverageMCP = mean(MCP), AverageSMP = mean(SMP))
ggplot(daily_prices, aes(x = WeekDay)) +
geom_line(aes(y = AverageMCP, color = "Average MCP", fill = as.factor(WeekDay))) +
geom_line(aes(y = AverageSMP, color = "Average SMP")) +
ggtitle("MCP & SMP Over Days") +
labs(x = "Days", y = "Price Values", color = "Legend") +
theme(plot.title = element_text(hjust = 0.5))
daily_prices <- elec_df %>%
group_by(WeekDay) %>%
summarise(AverageMCP = mean(MCP), AverageSMP = mean(SMP))
daily_prices
ggplot(daily_prices, aes(x = WeekDay)) +
geom_line(aes(y = AverageMCP, color = "Average MCP")) +
geom_line(aes(y = AverageSMP, color = "Average SMP")) +
ggtitle("MCP & SMP Over Days") +
labs(x = "Days", y = "Price Values", color = "Legend") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(daily_prices, aes(x = as.factor(WeekDay))) +
geom_line(aes(y = AverageMCP, color = "Average MCP")) +
geom_line(aes(y = AverageSMP, color = "Average SMP")) +
ggtitle("MCP & SMP Over Days") +
labs(x = "Days", y = "Price Values", color = "Legend") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(daily_prices, aes(x = as.factor(WeekDay), group = 1)) +
geom_line(aes(y = AverageMCP, color = "Average MCP")) +
geom_line(aes(y = AverageSMP, color = "Average SMP")) +
ggtitle("MCP & SMP Over Days") +
labs(x = "Days", y = "Price Values", color = "Legend") +
theme(plot.title = element_text(hjust = 0.5))
daily_prices <- elec_df %>%
group_by(WeekDay) %>%
summarise(AverageMCP = mean(MCP), AverageSMP = mean(SMP))
ggplot(daily_prices, aes(x = as.factor(WeekDay), group = 1)) +
geom_line(aes(y = AverageMCP, color = "Average MCP")) +
geom_line(aes(y = AverageSMP, color = "Average SMP")) +
ggtitle("MCP & SMP Over Days") +
labs(x = "Days", y = "Price Values", color = "Legend") +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 60,vjust=1,hjust=1))
View(daily_prices)
shiny::runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
install.packages("semantic.dashboard")
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
pti <- c("shiny","tidyverse","ggplot2movies")
pti <- pti[!(pti %in% installed.packages())]
if(length(pti)>0){
install.packages(pti)
}
library(shiny)
library(tidyverse)
library(ggplot2movies)
set.seed(61)
shiny_movie_set <-
movies %>%
filter(year >= 2000) %>%
select(title,year,length,rating,votes,Action:Short) %>%
gather(genre,value,Action:Short) %>%
filter(value == 1) %>%
select(-value)
genres <-
shiny_movie_set %>%
distinct(genre) %>%
unlist(.)
names(genres) <- NULL
genres
glimpse(shiny_movie_set)
min(shiny_movie_set$year)
?sliderInput
c(min(shiny_movie_set$year),max(shiny_movie_set$year))
c(min(shiny_movie_set$year)-1,max(shiny_movie_set$year)-1)
?selectInput
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
glimpse(shiny_movie_set)
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
shiny_movie_set
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
?selectInput
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
shiny_movie_set$genre
shiny_movie_set$genre
shiny_movie_set$genre
c("All",shiny_movie_set$genre)
c("All",shiny_movie_set$genre)[1]
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
c("All",shiny_movie_set$genre)[1]
c("All",shiny_movie_set$genre)[1]
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
my_df
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
?selectInput
?sliderInput
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
input$genres
genres
shiny_movie_set$genre[1]
length(shiny_movie_set$genre)
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
is.null(shiny_movie_set$asd)
is.null(shiny_movie_set$genres)
is.null(shiny_movie_set$genre)
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
runApp('Documents/GitHub/mef04-SBMEFBDA/myfirstshiny')
destination <- file.choose()
isbike_df <- readRDS(destination)
isbike_df %>% glimpse()
library(tidyverse)
isbike_df %>% glimpse()
isbike_df %>% glimpse()
isbike_df
install.packages("jsonlite")
library(jsonlite)
destination <- file.choose()
my_df <- readRDS(destination)
isbike_df <- read_json(my_df)
isbike_df <- read_json(destination)
destination <- file.choose()
isbike_df <- read_json(destination)
my_df <- readRDS(destination)
isbike_df <- fromJSON(my_df)
isbike_df %>% glimpse()
isbike_df
library(tidyverse)
isbike_df %>% glimpse()
isbike_df
isbike_df %>% count()
isbike_df %>% count(adi)
json_df <- fromJSON(my_df)
?as_tibble
isbike_df <- as_tibble(json_df)
isbike_df
View(isbike_df)
isbike_df %>% count(adi)
isbike_df %>% count($adi)
isbike_df %>% count(isbike_df$adi)
isbike_df <- as_tibble(json_df)
isbike_df
isbike_df %>% select(isbike_df$adi)
isbike_df %>% select(5)
isbike_df %>% select(1)
isbike_df %>% select(2)
isbike_df %>% select(3)
isbike_df %>% select(dataList$adi)
isbike_df %>% select(isbike_df$dataList$adi)
isbike_df %>% unnest(isbike_df$dataList)
isbike_df %>% unnest(isbike_df)
isbike_df %>% unnest(isbike_df$dataList)
?unnest
deneme <- select(isbike_df$dataList)
deneme
isbike_df
deneme <- select(isbike_df$dataList)
deneme
deneme
View(deneme)
deneme <- isbike_df %>% select(3)
deneme
deneme %>% unnest()
deneme %>% unnest(cols = c(dataList))
deneme2 <- deneme %>% unnest(cols = c(dataList))
deneme2 <- deneme %>% unnest()
deneme2 <- deneme %>% unnest(cols = c(deneme))
deneme2 %>% as_data_frame(deneme)
deneme2 <- deneme %>% as_data_frame(deneme)
deneme2 <- deneme %>% as_tibble(deneme)
View(deneme2)
deneme2
deneme3 <- deneme2 %>% unnest(cols = c(deneme2))
json_df <- fromJSON(destination)
destination <- file.choose()
destination <- file.choose()
deneme3 <- deneme2 %>% unnest(data)
my_df <- readRDS(destination)
json_df <- fromJSON(my_df)
json_df$3
json_df
View(json_df)
json_df[["dataList"]]
deneme <- json_df[["dataList"]]
isbike_df %>% glimpse()
destination <- file.choose()
my_df <- readRDS(destination)
json_df <- fromJSON(my_df)
isbike_df <- json_df[["dataList"]]
isbike_df %>% glimpse()
isbike_df
isbike_df %>% count(adi)
library(ggplot2)
library(ggmap)
install.packages(ggmap)
install.packages("ggmap")
library(ggplot2)
library(ggmap)
?ggmap
citation("ggmap")
remove.packages("ggmap")
shiny::runApp('Documents/GitHub/mef04g-rhapsody/rhapsody_isbike_assignment')
library(shiny)
library(tidyverse)
library(jsonlite)
library(ggplot2)
library(sf)
library(mapview)
library(DT)
library(leaflet)
my_df <- readRDS("https://github.com/pjournal/mef04g-rhapsody/blob/gh-pages/rhapsody_isbike_assignment/isbike_20201118.rds")
my_df <- readRDS("isbike_20201118.rds")
my_df <- readRDS("isbike_20201118.rds")
destination <- file.choose()
destination
my_df <- readRDS("isbike_20201118.rds")
my_df <- readRDS("/isbike_20201118.rds")
readRDS("isbike_20201118.rds")
readRDS("isbike_20201118.rds")
destination
install.packages('rsconnect')
rsconnect::setAccountInfo(name='serhanbayrambda', token='BE782E5985197EF808EF41DEFD4F6C1B', secret='P0rZm6Pzkn3n/xVq3difRaPqC56T3SCEYyITxJyY')
library(rsconnect)
shiny::runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
color_picker <- function(level_count) {
if (level_count < 3){
return("#D73027")
}
}
color_picker(2)
asd <- color_picker(2)
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
?between
between(1,1,2)
between(5,0,5)
between(5,0,6)
between(5,5,10)
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
?addLegend
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp()
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
1 > 3 || 1 > 2
1 > 3 || 1 > 1
1 > 3 || 1 > 0
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
runApp('Documents/GitHub/mef04g-rhapsody/isbike_assignment')
ncount(isbike_df)
count(isbike_df)
library(shiny)
library(tidyverse)
library(jsonlite)
library(ggplot2)
library(DT)
library(leaflet)
library(lubridate)
my_df <- readRDS("isbike_20201118.rds")
json_df <- fromJSON(my_df)
final_df <- json_df[["dataList"]]
isbike_df <- final_df %>%
transmute(StationNo = as.integer(istasyon_no),
StationName = adi,
Available = as.integer(bos),
Occupied = as.integer(dolu),
Capacity = Available + Occupied,
AvailabilityRate = round((Available / Capacity * 100), 1),
Latitude = as.numeric(lat),
Longitude = as.numeric(lon),
LastConnection = as.POSIXct(sonBaglanti,format='%Y-%m-%dT%H:%M:%S'),
LastConnectionDay = day(LastConnection)) %>%
mutate(AvailabilityRate = replace(AvailabilityRate, is.na(AvailabilityRate), 0),
Latitude = replace(Latitude, is.na(Latitude), 0))
count(isbike_df)
my_df <- readRDS("isbike_20201118.rds")
setwd("~/Documents/GitHub/mef04g-rhapsody/isbike_assignment")
my_df <- readRDS("isbike_20201118.rds")
json_df <- fromJSON(my_df)
final_df <- json_df[["dataList"]]
isbike_df <- final_df %>%
transmute(StationNo = as.integer(istasyon_no),
StationName = adi,
Available = as.integer(bos),
Occupied = as.integer(dolu),
Capacity = Available + Occupied,
AvailabilityRate = round((Available / Capacity * 100), 1),
Latitude = as.numeric(lat),
Longitude = as.numeric(lon),
LastConnection = as.POSIXct(sonBaglanti,format='%Y-%m-%dT%H:%M:%S'),
LastConnectionDay = day(LastConnection)) %>%
mutate(AvailabilityRate = replace(AvailabilityRate, is.na(AvailabilityRate), 0),
Latitude = replace(Latitude, is.na(Latitude), 0))
count(isbike_df)
asdasd <- data.frame()
count(asdasd)
asdasd
runApp()
runApp()
runApp('~/Desktop/isbike/isbike.R')
runApp()
View(json_df)
json_df[["dataList"]][["guid"]]
json_df[["dataList"]][["istasyon_no"]]
runApp()
runApp()
runApp()
station_types <- data.frame(
StationGroup = c("Stations", "Rates"),
StationNumber = c("Anatolia", round(count(anadolu_station)/count(isbike_df)*100,1)),
c("Europe", round(count(avrupa_station)/count(isbike_df)*100,1)),
c("Test", round(count(test_station)/count(isbike_df)*100,1))
)
my_df <- readRDS("isbike_20201118.rds")
json_df <- fromJSON(my_df)
final_df <- json_df[["dataList"]]
isbike_df <- final_df %>%
transmute(StationNo = as.integer(istasyon_no),
StationName = adi,
Available = as.integer(bos),
Occupied = as.integer(dolu),
Capacity = Available + Occupied,
AvailabilityRate = round((Available / Capacity * 100), 1),
Latitude = as.numeric(lat),
Longitude = as.numeric(lon),
LastConnection = as.POSIXct(sonBaglanti,format='%Y-%m-%dT%H:%M:%S'),
LastConnectionDay = day(LastConnection)) %>%
mutate(AvailabilityRate = replace(AvailabilityRate, is.na(AvailabilityRate), 0),
Latitude = replace(Latitude, is.na(Latitude), 0))
anadolu_station <- isbike_df %>%
filter((StationNo > 1000) & (StationNo <1899))
avrupa_station <- isbike_df %>%
filter(StationNo > 5000)
test_station <- isbike_df %>%
filter((StationNo > 1899) & (StationNo <2000))
station_types <- data.frame(
StationGroup = c("Stations", "Rates"),
StationNumber = c("Anatolia", round(count(anadolu_station)/count(isbike_df)*100,1)),
c("Europe", round(count(avrupa_station)/count(isbike_df)*100,1)),
c("Test", round(count(test_station)/count(isbike_df)*100,1))
)
station_types
station_types <- data.frame(
StationGroup = c("Anatolia", "Europe", "Test"),
StationRate = round(count(anadolu_station)/count(isbike_df)*100,1)
)
station_types
isbike_df <- final_df %>%
transmute(StationNo = as.integer(istasyon_no),
StationName = adi,
Available = as.integer(bos),
Occupied = as.integer(dolu),
Capacity = Available + Occupied,
AvailabilityRate = round((Available / Capacity * 100), 1),
Latitude = as.numeric(lat),
Longitude = as.numeric(lon),
LastConnection = as.POSIXct(sonBaglanti,format='%Y-%m-%dT%H:%M:%S'),
LastConnectionDay = day(LastConnection)) %>%
mutate(AvailabilityRate = replace(AvailabilityRate, is.na(AvailabilityRate), 0),
Latitude = replace(Latitude, is.na(Latitude), 0)) %>%
mutate(Side = ifelse(between(StationNo, 1001, 1898),"Anatolia",
ifelse(between(StationNo,1900,1999),"Test","Europe")))
View(isbike_df)
isbike_df$Side[isbike_df$StationName %in% c("Rönepark Sahil","Aqua Florya")] <- "Europe"
isbike_df$Side[isbike_df$StationName == "Dragos Şehir Üniversitesi"] <- "Anatolia"
isbike_df$Side[isbike_df$StationName %in%
c("Rönepark Sahil","Aqua Florya","Florya Sosyal Tesisler 1",
"Florya Sosyal Tesisler 2","Güneş Plajı")] <- "Europe"
station_sides <- isbike_df %>%
count(Side, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 0)) %>%
select(Side, Percentage)
station_sides
station_sides <- isbike_df %>%
count(Side, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 1)) %>%
select(Side, Percentage)
station_sides
station_types
bp <-ggplot(data=station_sides, aes(x="", y=Percentage, fill=Side)) +
geom_bar(width = 1, stat="identity")
pie <- bp + coord_polar("y", start = 0)
pie + geom_text(aes(y = Percentage/3 + c(0, cumsum(Percentage)[-length(Percentage)]),
label = percent(Percentage/100)), size=5)
bp <-ggplot(data=station_sides, aes(x="", y=Percentage, fill=Side)) +
geom_bar(width = 1, stat="identity")
pie <- bp + coord_polar("y", start = 0)
pie
library(scales)
pie + geom_text(aes(y = Percentage/3 + c(0, cumsum(Percentage)[-length(Percentage)]),
label = percent(Percentage/100)), size=5)
pie
bp <-ggplot(data=station_sides, aes(x="", y=Percentage, fill=Side)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
geom_text(aes(y = Percentage/3 + c(0, cumsum(Percentage)[-length(Percentage)]),
label = percent(Percentage/100)), size=5)
bp
bp <-ggplot(data=station_sides, aes(x="", y=Percentage, fill=Side)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(Percentage, "%")), color = "white", position = position_stack(vjust = 0.5)) +
theme_void()
bp
runApp()
runApp()
station_sides <- isbike_df %>%
count(Side, name = "Count") %>%
mutate(Percentage = round(Count / sum(Count) * 100, 1)) %>%
select(Side, Percentage)
ggplot(data=station_sides, aes(x="", y=Percentage, fill=Side)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(Percentage, "%")), color = "white", position = position_stack(vjust = 0.5)) +
labs(title="Percentage of stations based on location") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_void()
runApp()
ggplot(data=station_sides, aes(x="", y=Percentage, fill=Side)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(Percentage, "%")), color = "white", position = position_stack(vjust = 0.5)) +
ggtitle("Percentage of stations based on location") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_void()
ggplot(data=station_sides, aes(x="", y=Percentage, fill=Side)) +
geom_bar(width = 1, stat="identity") +
coord_polar("y", start = 0) +
geom_text(aes(label = paste0(Percentage, "%")), color = "white", position = position_stack(vjust = 0.5)) +
labs(title="Percentage of stations based on location") +
theme(plot.title = element_text(hjust = 0.5))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
